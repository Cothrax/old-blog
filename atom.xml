<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cothrax&#39;s Blog</title>
  <subtitle>I don&#39;t need a subtitle.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cothrax.github.io/"/>
  <updated>2016-12-24T10:34:02.431Z</updated>
  <id>https://cothrax.github.io/</id>
  
  <author>
    <name>Cothrax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The End.</title>
    <link href="https://cothrax.github.io/2016/12/24/the-end/"/>
    <id>https://cothrax.github.io/2016/12/24/the-end/</id>
    <published>2016-12-24T03:04:22.000Z</published>
    <updated>2016-12-24T10:34:02.431Z</updated>
    
    <content type="html"><![CDATA[<style>
    rt{
        font-size:70%;
    }
</style>

<p>这次真的结束了，NOIP2016<ruby>跪烂<rp> (</rp><rt>bèi cào</rt><rp>) </rp></ruby>，310分不忍直视，在JS勉强混个一等。<br><strong>不到一年的OI时光</strong>，从第一个hello world、第一场contest、第一篇blog，直至第一场NOIP，然后就结束了。<br>毕竟已经高二了，大概APIO、CTSC、NOI都是遥不可及的梦想吧。</p>
<blockquote>
<p>还没长大就老了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
    rt{
        font-size:70%;
    }
&lt;/style&gt;

&lt;p&gt;这次真的结束了，NOIP2016&lt;ruby&gt;跪烂&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;bèi cào&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;，310分不忍直视，在JS
    
    </summary>
    
      <category term="Uncategorized" scheme="https://cothrax.github.io/categories/Uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>bzoj-2400 Spoj 839 Optimal Marks</title>
    <link href="https://cothrax.github.io/2016/12/23/bzoj-2400/"/>
    <id>https://cothrax.github.io/2016/12/23/bzoj-2400/</id>
    <published>2016-12-23T13:21:16.000Z</published>
    <updated>2016-12-24T05:10:44.356Z</updated>
    
    <content type="html"><![CDATA[<p>定义无向图中的一条边的值为：这条边连接的两个点的值的异或值。<br>定义一个无向图的值为：这个无向图所有边的值的和。<br>给你一个有n个结点m条边的无向图。其中的一些点的值是给定的，而其余的点的值由你决定（但要求均为非负数），使得这个无向图的值最小。在无向图的值最小的前提下，使得无向图中所有点的值的和最小。<br>n&lt;=500，m&lt;=2000<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2400" target="_blank" rel="external">bzoj-2400</a><br><a href="/2016/12/23/bzoj-2400/graph.cpp" title="graph.cpp">graph.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先看到xor，显然要按位处理，这样每个点的值就变成了0或者1<br>设源汇s和t</p>
<ol>
<li>点v与s连通表示v的值为0</li>
<li>点v与t连通表示v的值为1</li>
</ol>
<p>xor意味着，只有当两边值不同时才会对答案产生贡献，也就是s集和t集的交界，要最小化答案，这符合最小割的定义<br>那么建图：</p>
<ol>
<li>对于确定的点v，如果v=0与s连边，v=1则与t连边</li>
<li>原图中的其他边直接加进去即可</li>
</ol>
<p>然后跑一次最大流就是第一问的答案<br>再考虑最小化点权和，当出现$u(\in s)\to x\to v(\in t)$时，最大流方案不唯一，此时把x放进s集是更优的，即割边$x\to v$更优，那么只要从t反向dfs，能dfs到的点即值为1的点，割$x\to v$会阻止dfs访问x节点</p>
<p>还有一种思路很神：<a href="http://blog.csdn.net/u012288458/article/details/50720724" target="_blank" rel="external">oxer</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ graph.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstring></cstring></p>
<p>#include<cmath></cmath></p>
<p>#define ll long long<br>using namespace std;<br>const int N=510,M=2010,INF=1E8;<br>struct edge{int v,cap,nxt;}g[M*100];<br>int head[N],sz=1;<br>void _add(int u,int v,int cap){<br>    g[++sz].v=v;g[sz].cap=cap;<br>    g[sz].nxt=head[u];head[u]=sz;<br>}<br>void add(int u,int v,int cap)<br>{_add(u,v,cap);_add(v,u,0);}</p>
<p>int q[N],d[N];<br>bool bfs(int s,int dest){<br>    fill(d,d+N,INF);<br>    d[s]=0;q[0]=s;int u,v;<br>    for(int h=0,t=1;h!=t;h=(h+1)%N)<br>        for(int i=head[u=q[h]];i;i=g[i].nxt)<br>            if(g[i].cap&amp;&amp;d[v=g[i].v]==INF)<br>                d[v]=d[u]+1,q[t++]=v,t%=N;<br>    return d[dest]!=INF;<br>}<br>int dfs(int u,int t,int f){<br>    if(u==t)return f;<br>    int ret=0,v;<br>    for(int i=head[u];i;i=g[i].nxt)<br>        if(d[v=g[i].v]==d[u]+1){<br>            int lim=dfs(v,t,min(f-ret,g[i].cap));<br>            g[i].cap-=lim;g[i^1].cap+=lim;ret+=lim;<br>            if(f==ret)return ret;<br>        }<br>    return ret;<br>}<br>int mf(int s,int t){<br>    int ret=0;<br>    while(bfs(s,t))ret+=dfs(s,t,INF);<br>    return ret;<br>}<br>int n,m,a[N],seg[M][2];<br>void init(int s,int t,int x){<br>    fill(head,head+N,0);sz=1;<br>    for(int i=1;i&lt;=n;i++)<br>        if(a[i]&gt;=0){<br>            if(a[i]&amp;(1&lt;&lt;x))add(i,t,INF);<br>            else add(s,i,INF);<br>        }<br>    for(int i=0;i&lt;m;i++){<br>        add(seg[i][0],seg[i][1],1);<br>        add(seg[i][1],seg[i][0],1);<br>    }<br>}<br>int vis[N];<br>int dfs(int u){<br>    int ret=1,v;vis[u]=1;<br>    for(int i=head[u];i;i=g[i].nxt)<br>        if(g[i^1].cap&amp;&amp;!vis[v=g[i].v])ret+=dfs(v);<br>    return ret;<br>}<br>int main(){<br>    freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    scanf(“%d %d\n”,&amp;n,&amp;m);int tmp=0;<br>    for(int i=1;i&lt;=n;i++)scanf(“%d\n”,&amp;a[i]),tmp=max(tmp,a[i]);<br>    for(int i=0;i&lt;m;i++)scanf(“%d %d\n”,&amp;seg[i][0],&amp;seg[i][1]);<br>    int lim=log2(tmp)+1,s=n+1,t=s+1;<br>    ll sumE=0,sumV=0,b=1;<br>    for(int i=0;i&lt;lim;i++,b&lt;&lt;=1){<br>        init(s,t,i);<br>        sumE+=((ll)mf(s,t))<em>b;<br>        fill(vis,vis+N,0);<br>        sumV+=((ll)(dfs(t)-1))</em>b;<br>    }<br>    printf(“%lld\n%lld”,sumE,sumV);<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义无向图中的一条边的值为：这条边连接的两个点的值的异或值。&lt;br&gt;定义一个无向图的值为：这个无向图所有边的值的和。&lt;br&gt;给你一个有n个结点m条边的无向图。其中的一些点的值是给定的，而其余的点的值由你决定（但要求均为非负数），使得这个无向图的值最小。在无向图的值最小的前提下，使得无向图中所有点的值的和最小。&lt;br&gt;n&amp;lt;=500，m&amp;lt;=2000&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DFS" scheme="https://cothrax.github.io/tags/DFS/"/>
    
      <category term="位运算" scheme="https://cothrax.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="网络流" scheme="https://cothrax.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最小割" scheme="https://cothrax.github.io/tags/%E6%9C%80%E5%B0%8F%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>【网络流24题】最长递增子序列问题</title>
    <link href="https://cothrax.github.io/2016/12/23/flow24-alis/"/>
    <id>https://cothrax.github.io/2016/12/23/flow24-alis/</id>
    <published>2016-12-23T13:16:11.000Z</published>
    <updated>2016-12-23T13:38:10.322Z</updated>
    
    <content type="html"><![CDATA[<p>给定正整数序列x1,….. , xn  。</p>
<ol>
<li>计算其最长递增子序列的长度s。</li>
<li>计算从给定的序列中最多可取出多少个长度为s的递增子序列。</li>
<li>如果允许在取出的序列中多次使用x1和xn，则从给定序列中最多可取出多少个长<br>度为s的递增子序列，如果可以取无限个则输出-1</li>
</ol>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><a href="/2016/12/23/flow24-alis/alis.cpp" title="alis.cpp">alis.cpp</a>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>黑书例题<br>第一问dp求f[i]以i开头的lis，用树状数组优化，或者直接暴力<br>第二问，拆点，根据f[i]分层建图，然后最大流即可<br>第三问就是把第二问建的图中，把1和n对应的那条边容量改成+∞，然后在跑一次最大流<br>lis=1时输出-1<br>lis=2且a[1]&lt;=a[n]时输出-1</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ alis.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio><br>using namespace std;<br>const int N=1010,INF=1E7;<br>int n,lis=0,a[N],f[N];<br>namespace bit{<br>    const int M=1.1E5;int v[M];<br>    void add(int x,int k){<br>        for(;x<m;x+=x&(-x))v[x]=max(v[x],k); }="" int="" ask(int="" x){="" ret="0;" for(;x;x="x&(x-1))ret=max(ret,v[x]);" return="" ret;="" void="" dp(){="" using="" namespace="" bit;="" f[i]="" max-len="" begin_with_a[i]="" (j="">i&amp;&amp;a[j]&gt;a[i])<br>    for(int i=n-1;i&gt;=0;i–){<br>        add(M-a[i],f[i]=ask(M-a[i])+1);<br>        lis=max(lis,f[i]);<br>    }<br>}<br>struct edge{int v,cap,nxt;}g[N*10];<br>int head[N],sz=1;<br>void _add(int u,int v,int cap){<br>    g[++sz].v=v;g[sz].cap=cap;<br>    g[sz].nxt=head[u];head[u]=sz;<br>}<br>void add(int u,int v,int cap)<br>{_add(u,v,cap);_add(v,u,0);}<br>int q[N],d[N];<br>bool bfs(int s,int dest){<br>    fill(d,d+N,INF);d[s]=0;q[0]=s;int u,v;<br>    for(int h=0,t=1;h!=t;h=(h+1)%N)<br>        for(int i=head[u=q[h]];i;i=g[i].nxt)<br>            if(g[i].cap&amp;&amp;d[v=g[i].v]==INF)<br>                d[v]=d[u]+1,q[t++]=v,t%=N;<br>    return d[dest]!=INF;<br>}<br>int dfs(int u,int t,int f){<br>    if(u==t)return f;<br>    int ret=0,v;<br>    for(int i=head[u];i;i=g[i].nxt)<br>        if(d[v=g[i].v]==d[u]+1){<br>            int tmp=dfs(v,t,min(f-ret,g[i].cap));<br>            g[i].cap-=tmp;g[i^1].cap+=tmp;ret+=tmp;<br>            if(f==ret)return ret;<br>        }<br>    return ret;<br>}<br>int mf(int s,int t){<br>    int ret=0;<br>    while(bfs(s,t))ret+=dfs(s,t,INF);<br>    return ret;<br>}<br>void init(int s,int t){<br>    fill(head,head+N,0);<br>    for(int i=0;i&lt;n;i++)<br>        for(int j=i+1;j&lt;n;j++)<br>            if(a[i]&lt;=a[j]&amp;&amp;f[i]==f[j]+1)add(i+n,j,INF);<br>    for(int i=0;i&lt;n;i++)add(i,i+n,1);<br>    for(int i=0;i&lt;n;i++){<br>        if(f[i]==1)add(i+n,t,INF);<br>        if(f[i]==lis)add(s,i,INF);<br>    }<br>}</m;x+=x&(-x))v[x]=max(v[x],k);></cstdio></p>
<p>int main(){<br>    freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    scanf(“%d\n”,&amp;n);<br>    for(int i=0;i&lt;n;i++)scanf(“%d”,&amp;a[i]);<br>    dp();printf(“%d\n”,lis);<br>    int s=n<em>2,t=s+1;<br>    init(s,t);<br>    printf(“%d\n”,mf(s,t));<br>    if(lis==1||lis==2&amp;&amp;a[0]&lt;=a[n-1])printf(“-1”);<br>    else{<br>        init(s,t);add(0,n,INF);add(n-1,2</em>n-1,INF);<br>        printf(“%d”,mf(s,t));<br>    }<br>    return 0;<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定正整数序列x1,….. , xn  。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算其最长递增子序列的长度s。&lt;/li&gt;
&lt;li&gt;计算从给定的序列中最多可取出多少个长度为s的递增子序列。&lt;/li&gt;
&lt;li&gt;如果允许在取出的序列中多次使用x1和xn，则从给定序列中最多可取出多少个长&lt;br&gt;度为s的递增子序列，如果可以取无限个则输出-1&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="线性DP" scheme="https://cothrax.github.io/tags/%E7%BA%BF%E6%80%A7DP/"/>
    
      <category term="网络流" scheme="https://cothrax.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://cothrax.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>【网络流24题】最长k可重区间集问题</title>
    <link href="https://cothrax.github.io/2016/12/23/flow24-interv/"/>
    <id>https://cothrax.github.io/2016/12/23/flow24-interv/</id>
    <published>2016-12-23T13:05:10.000Z</published>
    <updated>2016-12-23T13:36:30.814Z</updated>
    
    <content type="html"><![CDATA[<p>给定实直线L上n个开区间组成的集合I，和一个正整数k，试设计一个算法，从开区<br>间集合I 中选取出开区间集合S属于I，使得在实直线L的任何一点x，S 中包含点x 的开区间个数不超过k，且$\sum|z|,z\in S$，达到最大。这样的集合S称为开区间集合I的最长k可重区间集。<br>$\sum|z|$属于S称为最长k可重区间集的长度。<br>对于给定的开区间集合I和正整数k，计算开区间集合I的最长k可重区间集的长度。<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://hzwer.com/5842.html" target="_blank" rel="external">hzwer</a><br><a href="/2016/12/23/flow24-interv/interv.cpp" title="interv.cpp">interv.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>最大权不相交路径<br>任意点x处重合区间数不超过k，则将一些不相交的区间接起来看做一条路径，那么问题就变成了取权值和最大的k条路径<br>引用题解：</p>
<blockquote>
<p>离散化所有区间的端点，把每个端点看做一个顶点，建立附加源S汇T。</p>
<ol>
<li>从S到顶点1（最左边顶点）连接一条容量为K，费用为0的有向边。</li>
<li>从顶点2N（最右边顶点）到T连接一条容量为K，费用为0的有向边。</li>
<li>从顶点i到顶点i+1(i+1&lt;=2N)，连接一条容量为无穷大，费用为0的有向边。</li>
<li>对于每个区间[a,b]，从a对应的顶点i到b对应的顶点j连接一条容量为1，费用为区间长度的有向边。</li>
</ol>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ interv.cpp</p>
<p>#include<cstring></cstring></p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio><br>using namespace std;<br>const int N=1000,INF=1E7;<br>struct edge{int v,w,cap,nxt;}g[N*10];<br>int head[N],sz=1;<br>void _add(int u,int v,int cap,int w){<br>    g[++sz].v=v;g[sz].w=w;g[sz].cap=cap;<br>    g[sz].nxt=head[u];head[u]=sz;<br>}<br>void add(int u,int v,int cap,int w)<br>{_add(u,v,cap,w);_add(v,u,0,-w);}</cstdio></p>
<p>int q[N],d[N],pre[N];bool inq[N];<br>bool spfa(int s,int dest){<br>    fill(d,d+N,-INF);<br>    fill(inq,inq+N,0);<br>    fill(pre,pre+N,0);<br>    d[s]=0;inq[s]=1;q[0]=s;int u,v;<br>    for(int h=0,t=1;h!=t;inq[q[h]]=0,h=(h+1)%N)<br>        for(int i=head[u=q[h]];i;i=g[i].nxt)<br>            if(g[i].cap&amp;&amp;d[v=g[i].v]<d[u]+g[i].w){ d[v]="d[u]+g[i].w;pre[v]=i;" if(!inq[v])q[t++]="v,inq[v]=1,t%=N;" }="" return="" d[dest]!="-INF;" int="" mcf(int="" s,int="" t){="" ret="0,f=0;" while(spfa(s,t)){="" x="INF,y=0;" for(int="" i="pre[t];i;i=pre[g[i^1].v])" f+="x;ret+=x*y;" g[i].cap-="x,g[i^1].cap+=x;" ret;="" main(){="" freopen("in","r",stdin);freopen("out","w",stdout);="" n,k,vtx[n],l[n],r[n];="" scanf("%d="" %d\n",&n,&k);="" %d\n",&l[i],&r[i]);="" vtx[i]="l[i];vtx[i+n]=r[i];" sort(vtx,vtx+2*n);="" m="0,loc[(int)1E5];//[0,m]" loc[vtx[0]]="0;" if(vtx[i]="">vtx[m])<br>            vtx[++m]=vtx[i],loc[vtx[m]]=m;<br>    for(int i=0;i&lt;m;i++)add(i,i+1,INF,0);<br>    for(int i=0;i&lt;n;i++)<br>        add(loc[l[i]],loc[r[i]],1,r[i]-l[i]);<br>    int s=m+1,t=m+2;<br>    add(s,0,k,0);add(m,t,k,0);<br>    printf(“%d”,mcf(s,t));<br>    return 0;<br>}<br>```</d[u]+g[i].w){></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定实直线L上n个开区间组成的集合I，和一个正整数k，试设计一个算法，从开区&lt;br&gt;间集合I 中选取出开区间集合S属于I，使得在实直线L的任何一点x，S 中包含点x 的开区间个数不超过k，且$\sum|z|,z\in S$，达到最大。这样的集合S称为开区间集合I的最长k可重区间集。&lt;br&gt;$\sum|z|$属于S称为最长k可重区间集的长度。&lt;br&gt;对于给定的开区间集合I和正整数k，计算开区间集合I的最长k可重区间集的长度。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://cothrax.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="https://cothrax.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-3598 【FJ2014集训】XWW的难题</title>
    <link href="https://cothrax.github.io/2016/12/23/bzoj-3698/"/>
    <id>https://cothrax.github.io/2016/12/23/bzoj-3698/</id>
    <published>2016-12-23T12:40:54.000Z</published>
    <updated>2016-12-23T13:01:21.397Z</updated>
    
    <content type="html"><![CDATA[<p>XWW给你出了这么一个难题：XWW给你一个N*N的正实数矩阵A，满足XWW性。<br>称一个N*N的矩阵满足XWW性当且仅当：（1）A[N][N]=0；（2）矩阵中每行的最后一个元素等于该行前N-1个数的和；（3）矩阵中每列的最后一个元素等于该列前N-1个数的和。<br>现在你要给A中的数进行取整操作（可以是上取整或者下取整），使得最后的A矩阵仍然满足XWW性。同时XWW还要求A中的元素之和尽量大。<br>N≤100<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3698" target="_blank" rel="external">bzoj-3698</a><br><a href="/2016/12/23/bzoj-3698/3698.cpp" title="3698.cpp">3698.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>上下界最大流<br>建模：</p>
<ol>
<li>设超级源汇s和t，节点l(i)表示第i行，节点c(i)表示第i列</li>
<li>s-&gt;l(i)，容量为[floor(a[i][n]),ceil(a[i][n])]</li>
<li>r(i)-&gt;t，容量为[floor(a[n][i]),ceil(a[n][i])]</li>
<li>l(i)-&gt;r(j)，容量为[floor(a[i][j]),ceil(a[i][j])]</li>
</ol>
<p>关于如何将上下界最大流规约为普通流：<br>设边e下界为b(e)，上界为c(e)，伪流f’(e)=f(e)-b(e)<br>流量守恒：<br>$\sum_{e\in in(v)}[f’(e)+b(e)]=\sum_{e\in out(v)}[f’(e)+b(e)]$</p>
<p>则$\sum_{e\in in(v)}f’(e)=\sum_{e\in out(v)}f’(e)+[\sum_{e\in in(v)}b(e)-\sum_{e\in out(v)}b(e)]$</p>
<p>记$m(v)=\sum_{e\in in(v)}b(e)-\sum_{e\in out(v)}b(e)$</p>
<p>在原图上跑伪流f’，即把边e的容量变为c(e)-b(e)<br>为保证流量守恒，设附加源汇s’和t’<br>如果m(v)&gt;0，s’-&gt;v，容量m(v)<br>如果m(v)<0，v->t’，容量-m(v)<br>将超级源汇当做普通节点：t-&gt;s，容量∞<br>先从s’到t’跑最大流，如果从s’出发的边全部满载，则存在可行流以满足所有下界<br>然后从s到t跑最大流f，f即上下界最大流的答案</0，v-></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 3698.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cmath><br>using namespace std;<br>const int N=105,M=N<em>N,INF=1E7,EPS=1E-7;<br>struct edge{int v,cap,nxt;} g[M</em>10];<br>int head[M],sz=1;<br>void _add(int u,int v,int cap){<br>    g[++sz].v=v;g[sz].cap=cap;<br>    g[sz].nxt=head[u];head[u]=sz;<br>}<br>void add(int u,int v,int cap)<br>{_add(u,v,cap);_add(v,u,0);}</cmath></p>
<p>double a[N][N];int r[M],n,s,t,S,T,sum=0;<br>bool jud(double n){return abs(n-(int)n)<eps;} void="" init(){="" s="2*n+1,t=s+1,S=t+1,T=S+1;" fill(r,r+m,0);="" for(int="" i="1;i<n;i++){" if(!jud(a[i][n]))add(s,i,1);="" if(!jud(a[n][i]))add(i+n,t,1);="" r[s]-="(int)a[i][n];r[i]+=(int)a[i][n];" r[t]+="(int)a[n][i];r[i+n]-=(int)a[n][i];" j="1;j<n;j++){" if(!jud(a[i][j]))add(i,j+n,1);="" r[i]-="(int)a[i][j];r[j+n]+=(int)a[i][j];" }="" add(t,s,inf);="" if(r[i]="">0)add(S,i,r[i]),sum+=r[i];<br>        else add(i,T,-r[i]);<br>}</eps;}></p>
<p>int q[M],d[M];<br>bool bfs(int s,int dest){<br>    fill(d,d+M,INF);<br>    d[s]=0;q[0]=s;int u,v;<br>    for(int h=0,t=1;h!=t;h=(h+1)%M)<br>        for(int i=head[u=q[h]];i;i=g[i].nxt)<br>            if(g[i].cap&amp;&amp;d[v=g[i].v]==INF)<br>                {d[v]=d[u]+1;q[t++]=v;t%=M;}<br>    return d[dest]!=INF;<br>}<br>int dfs(int u,int t,int f){<br>    if(u==t)return f;<br>    int ret=0;int v;<br>    for(int i=head[u];i;i=g[i].nxt)<br>        if(d[v=g[i].v]==d[u]+1){<br>            int tmp=dfs(v,t,min(f-ret,g[i].cap));<br>            g[i].cap-=tmp;g[i^1].cap+=tmp;ret+=tmp;<br>            if(f==ret)return f;<br>        }<br>    if(!ret)d[u]=INF;<br>    return ret;<br>}<br>int mf(int s,int t){<br>    int ret=0;<br>    while(bfs(s,t))ret+=dfs(s,t,INF);<br>    return ret;<br>}</p>
<p>int main(){<br>    freopen(“in”,”r”,stdin);<br>    scanf(“%d\n”,&amp;n);<br>    for(int i=1;i&lt;=n;i++)<br>        for(int j=1;j&lt;=n;j++)scanf(“%lf”,&amp;a[i][j]);<br>    init();<br>    if(mf(S,T)&lt;sum)printf(“No”);<br>    else printf(“%d”,mf(s,t)*3);<br>    return 0;<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XWW给你出了这么一个难题：XWW给你一个N*N的正实数矩阵A，满足XWW性。&lt;br&gt;称一个N*N的矩阵满足XWW性当且仅当：（1）A[N][N]=0；（2）矩阵中每行的最后一个元素等于该行前N-1个数的和；（3）矩阵中每列的最后一个元素等于该列前N-1个数的和。&lt;br&gt;现在你要给A中的数进行取整操作（可以是上取整或者下取整），使得最后的A矩阵仍然满足XWW性。同时XWW还要求A中的元素之和尽量大。&lt;br&gt;N≤100&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://cothrax.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://cothrax.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1877 [SDOI2009]晨跑</title>
    <link href="https://cothrax.github.io/2016/12/23/bzoj-1877/"/>
    <id>https://cothrax.github.io/2016/12/23/bzoj-1877/</id>
    <published>2016-12-23T12:35:46.000Z</published>
    <updated>2016-12-23T14:00:46.537Z</updated>
    
    <content type="html"><![CDATA[<p> 现在给出一张学校附近的地图，这张地图中包含N个十字路口和M条街道，Elaxia只能从 一个十字路口跑向另外一个十字路口，街道之间只在十字路口处相交。Elaxia每天从寝室出发 跑到学校，保证寝室编号为1，学校编号为N。 Elaxia的晨跑计划是按周期（包含若干天）进行的，由于他不喜欢走重复的路线，所以 在一个周期内，每天的晨跑路线都不会相交（在十字路口处），寝室和学校不算十字路 口。Elaxia耐力不太好，他希望在一个周期内跑的路程尽量短，但是又希望训练周期包含的天 数尽量长。 除了练空手道，Elaxia其他时间都花在了学习和找MM上面，所有他想请你帮忙为他设计 一套满足他要求的晨跑计划。<br>N ≤ 200，M ≤ 20000<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1877" target="_blank" rel="external">bzoj-1877</a><br><a href="/2016/12/23/bzoj-1877/1877.cpp" title="1877.cpp">1877.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>裸的最小费用最大流。<br>每条边费用为它的长度，容量为1，然后从s到t跑费用流即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 1877.cpp</p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstring></cstring></p>
<p>#include<algorithm><br>using namespace std;<br>const int N=410,INF=1e7;<br>struct edge{int v,w,cap,nxt;} g[N*N];<br>int head[N],sz=1,n,m;<br>void _add(int u,int v,int w,int cap){<br>    g[++sz].v=v;g[sz].cap=cap;g[sz].w=w;<br>    g[sz].nxt=head[u];head[u]=sz;<br>}<br>void add(int u,int v,int w,int cap)<br>{_add(u,v,w,cap);_add(v,u,-w,0);}</algorithm></p>
<p>int d[N],q[N],pre[N];bool inq[N];<br>bool spfa(int s,int dest){<br>    fill(d,d+2<em>n+1,INF);d[s]=0;<br>    fill(inq,inq+2</em>n+1,0);inq[s]=1;<br>    fill(pre,pre+2<em>n+1,0);<br>    q[0]=s;int u,v;<br>    for(int h=0,t=1;h!=t;inq[q[h]]=0,h=(h+1)%N)<br>        for(int i=head[u=q[h]];i;i=g[i].nxt)<br>            if(g[i].cap&amp;&amp;d[v=g[i].v]&gt;d[u]+g[i].w){<br>                d[v]=d[u]+g[i].w;pre[v]=i;<br>                if(!inq[v])q[t++]=v,inq[v]=1,t%=N;<br>            }<br>    return d[dest]!=INF;<br>}<br>void mcf(int s,int t){<br>    int f=0,ret=0;<br>    while(spfa(s,t)){<br>        int x=INF,y=0;<br>        for(int i=pre[t];i;i=pre[g[i^1].v])<br>            x=min(x,g[i].cap),y+=g[i].w;<br>        f+=x;ret+=x</em>y;<br>        for(int i=pre[t];i;i=pre[g[i^1].v])<br>            g[i].cap-=x,g[i^1].cap+=x;<br>    }<br>    printf(“%d %d”,f,ret);<br>}<br>int main(){<br>    freopen(“in”,”r”,stdin);<br>    scanf(“%d %d\n”,&amp;n,&amp;m);int u,v,w;<br>    for(int i=1;i&lt;=n;i++)add(i,i+n,0,1);<br>    for(int i=0;i&lt;m;i++)<br>        scanf(“%d %d %d\n”,&amp;u,&amp;v,&amp;w),add(u+n,v,w,1);<br>    mcf(1+n,n);<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 现在给出一张学校附近的地图，这张地图中包含N个十字路口和M条街道，Elaxia只能从 一个十字路口跑向另外一个十字路口，街道之间只在十字路口处相交。Elaxia每天从寝室出发 跑到学校，保证寝室编号为1，学校编号为N。 Elaxia的晨跑计划是按周期（包含若干天）进行的，由于他不喜欢走重复的路线，所以 在一个周期内，每天的晨跑路线都不会相交（在十字路口处），寝室和学校不算十字路 口。Elaxia耐力不太好，他希望在一个周期内跑的路程尽量短，但是又希望训练周期包含的天 数尽量长。 除了练空手道，Elaxia其他时间都花在了学习和找MM上面，所有他想请你帮忙为他设计 一套满足他要求的晨跑计划。&lt;br&gt;N ≤ 200，M ≤ 20000&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://cothrax.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="SDOI" scheme="https://cothrax.github.io/tags/SDOI/"/>
    
      <category term="费用流" scheme="https://cothrax.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1500 [NOI2005]维修数列</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-1500/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-1500/</id>
    <published>2016-12-18T05:15:33.000Z</published>
    <updated>2016-12-18T05:21:13.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.lydsy.com/JudgeOnline/images/1500_1.jpg" alt=""><br>Limit:<br>M≤20000<br>任何时刻数列中最多含有500000个数，数列中任何一个数字均在[-1000,1000]内。<br>插入的数字总数不超过4000000个，输入文件大小不超过20MBytes。<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1500" target="_blank" rel="external">bzoj-1500</a><br><a href="/2016/12/18/bzoj-1500/1500.cpp" title="1500.cpp">1500.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>Splay模板题<br>关于max-sum，由于Splay的中序序列即该序列：</p>
<ol>
<li>lmx[x]子树x中序序列的最大前缀和</li>
<li>rmx[x]子树x中序序列的最大前缀和</li>
<li>sub[x]子树x中序序列的最大子段和</li>
</ol>
<p>更新见upd函数<br>summary</p>
<ol>
<li>下标，注意splay中虚拟节点的左端点占一位</li>
<li>翻转时要维护max-sum</li>
<li>内存回收：开一个stack</li>
<li>初始值：lmx[0]=rmx[0]=0,sub[0]=-INF</li>
<li>max-sum子段不为空，因此make-same中当w[x]为负时，sub[x]=max(w[x],sum[x])，而lmx[x]=rmx[x]=max(0,sum[x])</li>
<li>维护make-same标记时，由于涉及权值修改，要判断t!=0</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 1500.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstring></cstring></p>
<p>#define L(x) c[x][0]</p>
<p>#define R(x) c[x][1]<br>using namespace std;<br>namespace spt{<br>    const int N=5e5+10,INF=1e7;<br>    int c[N][2],par[N],siz[N]={0},sz=0,rt=1;<br>    int sub[N],lmx[N],rmx[N],w[N],sum[N];<br>    bool rev[N],tag[N];<br>    int loc[N],a[N];<br>    namespace mem{<br>        int stk[N<em>2],t=N;<br>        void init(){for(int i=0;i&lt;N;i++)stk[i]=N-i;}<br>        inline int ext(){return stk[–t];}<br>        inline void ins(int x){stk[t++]=x;}<br>        inline void rec(int x){<br>            if(!x)return;<br>            ins(x);rec(L(x));rec(R(x));<br>            L(x)=R(x)=par[x]=tag[x]=rev[x]=0;<br>        }<br>    }<br>    void upd(int x){<br>        siz[x]=siz[L(x)]+siz[R(x)]+1;<br>        sum[x]=sum[L(x)]+sum[R(x)]+w[x];<br>        lmx[x]=max(lmx[L(x)],sum[L(x)]+lmx[R(x)]+w[x]);<br>        rmx[x]=max(rmx[R(x)],sum[R(x)]+rmx[L(x)]+w[x]);<br>        sub[x]=max(max(sub[L(x)],sub[R(x)]),lmx[R(x)]+rmx[L(x)]+w[x]);<br>    }<br>    void pushdn(int x){<br>        for(int i=0;i&lt;2&amp;&amp;rev[x];i++){<br>            int t=c[x][i];rev[t]^=1;<br>            swap(L(t),R(t));swap(lmx[t],rmx[t]);<br>        }<br>        for(int i=0;i&lt;2&amp;&amp;tag[x];i++){<br>            int t=c[x][i];if(!t)continue;<br>            w[t]=w[x];tag[t]=1;<br>            lmx[t]=rmx[t]=max(0,sum[t]=w[t]</em>siz[t]);<br>            sub[t]=max(sum[t],w[t]);<br>        }rev[x]=tag[x]=0;<br>    }<br>    void rotate(int x,int &amp;k){<br>        int y=par[x],z=par[y],l=c[y][0]!=x,r=l^1;<br>        if(y==k)k=x;else c[z][c[z][0]!=y]=x;<br>        par[c[x][r]]=y;par[y]=x;par[x]=z;<br>        c[y][l]=c[x][r];c[x][r]=y;<br>        upd(y);upd(x);<br>    }<br>    void splay(int x,int &amp;k){<br>        while(x!=k){<br>            int y=par[x],z=par[y];<br>            if(y!=k){<br>                if(L(y)==x^L(z)==y)rotate(x,k);<br>                else rotate(y,k);<br>            }rotate(x,k);<br>        }<br>    }<br>    int find(int x,int rk){<br>        pushdn(x);<br>        if(siz[L(x)]+1==rk)return x;<br>        else if(siz[L(x)]&gt;=rk)return find(L(x),rk);<br>        else return find(R(x),rk-siz[L(x)]-1);<br>    }<br>    void build(int l,int r,int p){<br>        if(l&gt;r)return;<br>        int mid=(l+r)&gt;&gt;1,x=loc[mid];<br>        if(l==r){<br>            par[x]=loc[p];c[loc[p]][l&gt;p]=x;<br>            w[x]=a[l];upd(x);<br>            return;<br>        }<br>        build(l,mid-1,mid);build(mid+1,r,mid);<br>        par[x]=loc[p];c[loc[p]][mid&gt;p]=x;<br>        w[x]=a[mid];upd(x);<br>    }<br>    int split(int l,int r){<br>        int x=find(rt,l),y=find(rt,r+2);<br>        splay(x,rt);splay(y,R(rt));<br>        return L(y);<br>    }<br>    namespace opt{<br>        void init(int n){<br>            mem::init();<br>            for(int i=1;i&lt;=n;i++)scanf(“%d”,&amp;a[i]);<br>            for(int i=0;i&lt;=n+1;i++)loc[i]=mem::ext();<br>            sub[0]=a[0]=a[n+1]=-INF;<br>            rt=loc[(n+1)&gt;&gt;1];build(0,n+1,n+2);<br>        }<br>        void rever(int l,int r){<br>            int x=split(l,r);<br>            if(tag[x])return;<br>            rev[x]^=1;<br>            swap(L(x),R(x));swap(lmx[x],rmx[x]);<br>            upd(par[x]);upd(rt);<br>        }<br>        int query(int l,int r){<br>            int x=split(l,r);<br>            return sum[x];<br>        }<br>        void del(int l,int r){<br>            int x=split(l,r);<br>            L(par[x])=0;upd(par[x]);upd(rt);<br>            mem::rec(x);<br>        }<br>        void modify(int l,int r,int k){<br>            int x=split(l,r);tag[x]=1;w[x]=k;<br>            lmx[x]=rmx[x]=max(0,sum[x]=w[x]*siz[x]);<br>            sub[x]=max(sum[x],w[x]);<br>            upd(par[x]);upd(rt);<br>        }<br>        void ins(int l,int tot){<br>            for(int i=0;i&lt;tot;i++)scanf(“%d “,&amp;a[i]);<br>            for(int i=0;i&lt;tot;i++)loc[i]=mem::ext();<br>            split(l+1,l);<br>            loc[tot]=R(rt);build(0,tot-1,tot);<br>            upd(loc[tot]);upd(rt);<br>        }<br>        int get(){return sub[rt];}<br>    }<br>}<br>int main(){<br>    using namespace spt::opt;<br>    freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    int n,m;scanf(“%d %d\n”,&amp;n,&amp;m);<br>    init(n);<br>    for(int i=0;i&lt;m;i++){<br>        char s[10];int p,t,k;<br>        scanf(“%s”,s);<br>        if(s[2]!=’X’)scanf(“%d %d”,&amp;p,&amp;t);<br>        if(s[2]==’K’)scanf(“%d”,&amp;k);<br>        switch(s[0]){<br>            case’I’:ins(p,t);break;<br>            case’D’:del(p,p+t-1);break;<br>            case’R’:rever(p,p+t-1);break;<br>            case’G’:printf(“%d\n”,query(p,p+t-1));break;<br>            default:<br>                switch(s[2]){<br>                    case’K’:modify(p,p+t-1,k);break;<br>                    case’X’:printf(“%d\n”,get());break;<br>                }break;<br>        }<br>    }<br>    return 0;<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.lydsy.com/JudgeOnline/images/1500_1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Limit:&lt;br&gt;M≤20000&lt;br&gt;任何时刻数列中最多含有500000个数，数列中任何一个数字均在[-1000,1000]内。&lt;br&gt;插入的数字总数不超过4000000个，输入文件大小不超过20MBytes。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://cothrax.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="NOI" scheme="https://cothrax.github.io/tags/NOI/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Splay" scheme="https://cothrax.github.io/tags/Splay/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-3173 [Tjoi2013]最长上升子序列</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-3173/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-3173/</id>
    <published>2016-12-18T05:06:47.000Z</published>
    <updated>2016-12-18T05:21:31.906Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个序列，初始为空。现在我们将1到N的数字插入到序列中，每次将一个数字插入到一个特定的位置x_i。每插入一个数字，我们都想知道此时最长上升子序列长度是多少？<br>n&lt;=100000<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3173" target="_blank" rel="external">bzoj-3173</a><br><a href="/2016/12/18/bzoj-3173/3173.cpp" title="3173.cpp">3173.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于是从小到大插入，记f[i]为以i结尾的lis<br>那么f[i]=f[前x_i个数]的最大值+1<br>于是用treap维护该数列：</p>
<ol>
<li>该序列为treap的中序遍历，并维护子树的f[i]最大值</li>
<li>每次查询rank&lt;x_i的f[i]的最大值</li>
<li>插入i时，先找到rank=x_i+1的点，然后将i作为前驱插入</li>
</ol>
<p>attention:<br>ins等函数中&amp;x是引用，调用时要用c[x][0]而不是l</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 3173.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstdlib></cstdlib></p>
<p>#define L(x) c[x][0]</p>
<p>#define R(x) c[x][1]<br>using namespace std;<br>const int N=1e5+10;<br>namespace treap{<br>    int rnd[N]={0},siz[N]={0},c[N][2],sz=0,rt;<br>    int w[N],sub[N]={0},ans=0;<br>    int upd(int &amp;x){<br>        siz[x]=siz[L(x)]+siz[R(x)]+1;<br>        sub[x]=max(max(sub[L(x)],sub[R(x)]),w[x]);<br>        ans=max(ans,sub[x]);<br>    }<br>    int rotate(int &amp;x,int l){<br>        int r=l^1,y=c[x][l];<br>        c[x][l]=c[y][r];c[y][r]=x;<br>        upd(x);upd(y);x=y;<br>    }<br>    int query(int &amp;x,int rk){<br>        if(!rk||!x)return 0;<br>        if(siz[L(x)]&gt;=rk)return query(L(x),rk);<br>        if(siz[L(x)]<rk){ int="" ret="query(R(x),rk-siz[L(x)]-1);" return="" max(ret,max(sub[l(x)],w[x]));="" }="" void="" add(int="" &x,int="" val,int="" l){="" if(!x){="" x="++sz;w[sz]=val;upd(sz);" rnd[sz]="rand();return;" add(c[x][l],val,l);upd(x);="" if(rnd[c[x][l]]="">rnd[x])rotate(x,l);<br>    }<br>    void ins(int &amp;x,int rk,int val){<br>        if(siz[rt]+1==rk){add(rt,val,1);return;}<br>        if(siz[L(x)]+1==rk){<br>            add(L(x),val,1);upd(x);<br>            if(rnd[L(x)]&gt;rnd[x])rotate(x,0);<br>        }else if(siz[L(x)]&gt;=rk)ins(L(x),rk,val);<br>         else ins(R(x),rk-siz[L(x)]-1,val);<br>        upd(x);<br>    }<br>    void walk(int x,int dep){<br>        if(!x)return;<br>        walk(L(x),dep+1);<br>        for(int i=0;i&lt;dep;i++)printf(“    “);<br>        printf(“%d:%d(%d)\n”,x,w[x],siz[x]);<br>        walk(R(x),dep+1);<br>    }<br>}<br>int main(){<br>    using namespace treap;<br>    srand(12345632);<br>    freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    int n,x;scanf(“%d”,&amp;n);<br>    for(int i=0;i&lt;n;i++){<br>        int x;scanf(“%d”,&amp;x);<br>        ins(rt,x+1,query(rt,x)+1);<br>        printf(“%d\n”,ans);<br>    }<br>}<br>```</rk){></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个序列，初始为空。现在我们将1到N的数字插入到序列中，每次将一个数字插入到一个特定的位置x_i。每插入一个数字，我们都想知道此时最长上升子序列长度是多少？&lt;br&gt;n&amp;lt;=100000&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://cothrax.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Treap" scheme="https://cothrax.github.io/tags/Treap/"/>
    
      <category term="TJOI" scheme="https://cothrax.github.io/tags/TJOI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-3506 [Cqoi2014]排序机械臂</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-3506/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-3506/</id>
    <published>2016-12-18T04:57:17.000Z</published>
    <updated>2016-12-18T05:21:21.614Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个长n的数列，有n次操作，第i次为：<br>找到i..n中最小的数，记它的下标为k，翻转区间[i,k]<br>并输出k值<br>n≤100000</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3506" target="_blank" rel="external">bzoj-3506</a><br><a href="/2016/12/18/bzoj-3506/3506.cpp" title="3506.cpp">3506.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>splay维护序列</p>
<ol>
<li>在建树时维护个点所在下标，将数列sort一下，升序处理</li>
<li>对于第i个数，下标为loc[i]，从loc[i]向上直到根节点压进一个栈，然后从上到下pushdown一遍，再遍历一遍统计loc[i]的rank</li>
<li>然后splay翻转[1,rank]即可</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 3506.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#define P pair<int,int></int,int></p>
<p>#define mkp(x,y) make_pair(x,y)<br>using namespace std;<br>const int N=100010;<br>namespace splay_tree{<br>    int c[N][2],w[N],par[N],siz[N],sz=0,rt=1,loc[N],a[N];<br>    bool rev[N];<br>    void upd(int x){siz[x]=siz[c[x][0]]+siz[c[x][1]]+1;}<br>    void pushdn(int x){<br>        for(int i=0;i<2&&rev[x];i++){ int="" t="c[x][i];rev[t]^=1;" swap(c[t][0],c[t][1]);="" }rev[x]="0;" }="" void="" rotate(int="" x,int="" &k){="" y="par[x],z=par[y],l=c[y][0]==x?0:1,r=l^1;" if(y="=k)k=x;else" c[z][c[z][0]="=y?0:1]=x;" par[c[x][r]]="y;par[y]=x;par[x]=z;" c[y][l]="c[x][r];c[x][r]=y;" upd(y);upd(x);="" splay(int="" while(x!="k){" if(y!="k){" if(c[y][0]="=x^c[z][0]==y)rotate(x,k);" else="" rotate(y,k);="" }rotate(x,k);="" find(int="" rk){="" pushdn(x);="" l="c[x][0],r=c[x][1];" if(siz[l]+1="=rk)return" x;="" if(siz[l]="">=rk)return find(l,rk);<br>        else return find(r,rk-siz[l]-1);<br>    }<br>    int rever(int st,int k){<br>        int q[N],t=0;<br>        for(int x=k;x;x=par[x])q[t++]=x;<br>        for(int i=t-1;i&gt;=0;i–)pushdn(q[i]);<br>        int rk=siz[c[k][0]];<br>        for(int i=1;i<t;i++){ int="" x="q[i],l=c[x][0],r=c[x][1];" if(q[i-1]="=r)rk+=siz[l]+1;" }="" splay(x,rt);splay(y,c[rt][1]);="" return="" rk;="" void="" build(int="" l,int="" r,int="" p){="" if(l="">r)return;<br>        if(l==r){<br>            loc[l]=++sz;<br>            par[sz]=loc[p];c[loc[p]][l<p?0:1]=sz; w[sz]="a[l];siz[sz]=1;upd(sz);" return;="" }="" int="" mid="(l+r)">&gt;1,x=loc[mid]=++sz;<br>        build(l,mid-1,mid);build(mid+1,r,mid);<br>        par[x]=loc[p];c[loc[p]][mid&lt;p?0:1]=x;<br>        w[x]=a[mid];siz[x]=1;upd(x);<br>    }<br>}<br>int main(){<br>    using namespace splay_tree;<br>    //freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    int n;scanf(“%d”,&amp;n);<br>    for(int i=1;i&lt;=n;i++)scanf(“%d”,&amp;a[i]);<br>    build(0,n+1,n+2);<br>    P b[N];<br>    for(int i=1;i&lt;=n;i++)b[i-1]=mkp(a[i],i);<br>    sort(b,b+n);<br>    for(int i=0;i&lt;n;i++)<br>        printf(“%d “,rever(i+1,loc[b[i].second]));<br>}<br>```</p?0:1]=sz;></t;i++){></2&&rev[x];i++){></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个长n的数列，有n次操作，第i次为：&lt;br&gt;找到i..n中最小的数，记它的下标为k，翻转区间[i,k]&lt;br&gt;并输出k值&lt;br&gt;n≤100000&lt;/p&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Splay" scheme="https://cothrax.github.io/tags/Splay/"/>
    
      <category term="CQOI" scheme="https://cothrax.github.io/tags/CQOI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-3223 Tyvj 1729 文艺平衡树</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-3223/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-3223/</id>
    <published>2016-12-18T04:51:40.000Z</published>
    <updated>2016-12-18T05:21:27.555Z</updated>
    
    <content type="html"><![CDATA[<p>维护长n一个数列$a_n$，初始为$a_i=i$，支持m次区间翻转，输出翻转后的结果<br>N,M&lt;=100000<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3223" target="_blank" rel="external">bzoj-3223</a><br><a href="/2016/12/18/bzoj-3223/3223.cpp" title="3223.cpp">3223.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>splay即可<br>见：</p>
<ol>
<li><a href="https://oi.men.ci/splay-notes-1/" target="_blank" rel="external">Splay 学习笔记（一）</a></li>
<li><a href="https://oi.men.ci/splay-notes-2/" target="_blank" rel="external">Splay 学习笔记（二）</a></li>
</ol>
<p>静态数组的写法是跟黄学长学的</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 3223.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio><br>using namespace std;<br>const int N=100010;<br>//splay::begin<br>int c[N][2],siz[N],par[N],rt;bool flg[N];<br>void upd(int x){siz[x]=siz[c[x][0]]+siz[c[x][1]]+1;}<br>void pushdn(int x){<br>    if(!flg[x])return;<br>    swap(c[x][0],c[x][1]);<br>    int l=c[x][0],r=c[x][1];<br>    flg[l]^=1;flg[r]^=1;flg[x]=0;<br>}<br>void rotate(int x,int &amp;k){<br>    int y=par[x],z=par[y],l=c[y][0]==x?0:1,r=l^1;<br>    if(y==k)k=x;else c[z][c[z][0]==y?0:1]=x;<br>    par[x]=z;par[y]=x;par[c[x][r]]=y;<br>    c[y][l]=c[x][r];c[x][r]=y;<br>    upd(y);upd(x);<br>}<br>int rank(int x,int rk){<br>    pushdn(x);int l=c[x][0],r=c[x][1];<br>    if(siz[l]+1==rk)return x;<br>    else if(siz[l]&gt;=rk)return rank(l,rk);<br>    else return rank(r,rk-siz[l]-1); //bug: r,not l<br>}<br>int find(int rk){return rank(rt,rk);}<br>void splay(int x,int &amp;k){<br>    while(x!=k){<br>        int y=par[x],z=par[y];<br>        if(y!=k){<br>            if(c[y][0]==x^c[z][0]==y)rotate(x,k);<br>            else rotate(y,k);<br>        }rotate(x,k); //bug:rotate,not splay<br>    }<br>}<br>void build(int l,int r,int p){<br>    if(l&gt;r)return;<br>    if(l==r){<br>        par[l]=p;siz[l]=1;c[p][l<p?0:1]=l; return;="" }="" int="" mid="(l+r)">&gt;1;<br>    build(l,mid-1,mid);build(mid+1,r,mid);<br>    par[mid]=p;upd(mid);c[p][mid<p?0:1]=mid; }="" void="" rev(int="" l,int="" r){="" int="" x="find(l),y=find(r+2);" splay(x,rt);splay(y,c[rt][1]);="" flg[c[y][0]]^="1;" walk(int="" x,int="" lim){="" if(!x)return;pushdn(x);="" walk(c[x][0],lim);="" if(x!="lim&&x!=1)printf("%d" ",x-1);="" walk(c[x][1],lim);="" splay::end="" main(){="" freopen("in","r",stdin);freopen("out","w",stdout);="" n,m,l,r;scanf("%d="" %d\n",&n,&m);="" rt="(n+3)">&gt;1;build(1,n+2,0);<br>    for(int i=0;i&lt;m;i++)<br>        scanf(“%d %d\n”,&amp;l,&amp;r),rev(l,r);<br>    walk(rt,n+2);<br>    return 0;<br>}<br>```</p?0:1]=mid;></p?0:1]=l;></cstdio></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;维护长n一个数列$a_n$，初始为$a_i=i$，支持m次区间翻转，输出翻转后的结果&lt;br&gt;N,M&amp;lt;=100000&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://cothrax.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Splay" scheme="https://cothrax.github.io/tags/Splay/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1503 [NOI2004]郁闷的出纳员</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-1503/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-1503/</id>
    <published>2016-12-18T04:44:45.000Z</published>
    <updated>2016-12-18T05:21:44.167Z</updated>
    
    <content type="html"><![CDATA[<p>维护一个集合，支持如下操作：</p>
<ol>
<li>I_k 插入一个数k</li>
<li>A_k 将集合中的所有数加k</li>
<li>S_k 将集合中的所有数减k</li>
<li>F_k 查询第k大的数</li>
</ol>
<p>给定下界min，S_k之后会删除集合中值小于min的数，如果I_k插入的数值小于k会被立刻删除。</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1503" target="_blank" rel="external">bzoj-1503</a><br><a href="/2016/12/18/bzoj-1503/1503.cpp" title="1503.cpp">1503.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>平衡树+全局表示即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Treap<br>```c++ 1503.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstdlib><br>using namespace std;<br>const int N=100010;<br>int dlt=0,sz=0;<br>struct node{int l,r,w,rnd,cnt,s;}t[N];<br>void upd(int &amp;k){t[k].s=t[t[k].l].s+t[t[k].r].s+t[k].cnt;}<br>void lturn(int &amp;k){<br>    int p=t[k].r;t[k].r=t[p].l;t[p].l=k;<br>    t[p].s=t[k].s;upd(k);k=p;<br>}<br>void rturn(int &amp;k){<br>    int p=t[k].l;t[k].l=t[p].r;t[p].r=k;<br>    t[p].s=t[k].s;upd(k);k=p;<br>}<br>void ins(int &amp;k,int x){<br>    if(!k)t[k=++sz].rnd=rand(),t[k].w=x,t[k].cnt=t[k].s=1;<br>    else if(x<t[k].w){ ins(t[k].l,x);upd(k);="" if(t[k].rnd<t[t[k].l].rnd)rturn(k);="" }else="" if(x="">t[k].w){<br>        ins(t[k].r,x);upd(k);<br>        if(t[k].rnd<t[t[k].r].rnd)lturn(k); }else{t[k].cnt++;upd(k);}="" }="" int="" del(int="" &k,int="" x){="" if(!k)return="" 0;="" if(t[k].w<x){="" ret="t[t[k].l].s+t[k].cnt;k=t[k].r;" ret+="del(k,x);upd(k);return" ret;="" }else{="" kth(int="" -1;="" tmp="t[k].s-t[t[k].l].s;" if(t[t[k].r].s="">=x)return kth(t[k].r,x);<br>    else if(tmp<x) return="" kth(t[k].l,x-tmp);="" else="" t[k].w+dlt;="" }="" void="" print(int="" &k,int="" dep){="" if(!k)return;="" print(t[k].l,dep+1);="" for(int="" i="0;i<dep;i++)printf("" ");="" printf("t[%d]="%d(%d/%d)%d\n",k,t[k].w,t[k].cnt," t[k].s,t[k].rnd="" 1000000);="" print(t[k].r,dep+1);="" int="" main(){="" freopen("in","r",stdin);freopen("out","w",stdout);="" srand(102458);="" n,m,ans="0,rt=0;" scanf("%d="" %d\n",&n,&m);="" char="" c;int="" x;scanf("%c="" %d\n",&c,&x);="" switch(c){="" case="" 'i':if(x="">=m)ins(rt,x-dlt);break;<br>            case ‘A’:dlt+=x;break;<br>            case ‘S’:dlt-=x,ans+=del(rt,m-dlt);break;<br>            case ‘F’:printf(“%d\n”,kth(rt,x));break;<br>        }<br>    }<br>    printf(“%d”,ans);<br>    return 0;<br>}<br>```</x)></t[t[k].r].rnd)lturn(k);></t[k].w){></cstdlib></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;维护一个集合，支持如下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I_k 插入一个数k&lt;/li&gt;
&lt;li&gt;A_k 将集合中的所有数加k&lt;/li&gt;
&lt;li&gt;S_k 将集合中的所有数减k&lt;/li&gt;
&lt;li&gt;F_k 查询第k大的数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;给定下界min，S_k之后会删除集合中值小于min的数，如果I_k插入的数值小于k会被立刻删除。&lt;/p&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://cothrax.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="NOI" scheme="https://cothrax.github.io/tags/NOI/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Treap" scheme="https://cothrax.github.io/tags/Treap/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1588 [HNOI2002]营业额统计</title>
    <link href="https://cothrax.github.io/2016/12/18/bzoj-1588/"/>
    <id>https://cothrax.github.io/2016/12/18/bzoj-1588/</id>
    <published>2016-12-18T04:35:23.000Z</published>
    <updated>2016-12-18T05:23:23.972Z</updated>
    
    <content type="html"><![CDATA[<p>Tiger最近被公司升任为营业部经理，他上任后接受公司交给的第一项任务便是统计并分析公司成立以来的营业情况。<br>Tiger拿出了公司的账本，账本上记录了公司成立以来每天的营业额。分析营业情况是一项相当复杂的工作。由于节假日，大减价或者是其他情况的时候，营业额会出现一定的波动，当然一定的波动是能够接受的，但是在某些时候营业额突变得很高或是很低，这就证明公司此时的经营状况出现了问题。经济管理学上定义了一种最小波动值来衡量这种情况： 该天的最小波动值 当最小波动值越大时，就说明营业情况越不稳定。<br>而分析整个公司的从成立到现在营业情况是否稳定，只需要把每一天的最小波动值加起来就可以了。你的任务就是编写一个程序帮助Tiger来计算这一个值。 第一天的最小波动值为第一天的营业额。<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1588" target="_blank" rel="external">bzoj-1588</a><br><a href="/2016/12/18/bzoj-1588/1588.cpp" title="1588.cpp">1588.cpp</a><br><a href="/2016/12/18/bzoj-1588/1588_lnk.cpp" title="1588_lnk.cpp">1588_lnk.cpp</a></p>
<h2 id="在线-Treap"><a href="#在线-Treap" class="headerlink" title="在线-Treap"></a>在线-Treap</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>维护treap，找前/后驱取最小值即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>```c++ 1588.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cstdlib><br>using namespace std;<br>const int N=50010,INF=1E8;<br>struct treap{<br>    int sz;<br>    struct node{int l,r,w,rnd;}t[N];<br>    treap(){sz=0;srand(20001106);}<br>    void lturn(int &amp;k)<br>    {int p=t[k].r;t[k].r=t[p].l;t[p].l=k;k=p;}<br>    void rturn(int &amp;k)<br>    {int p=t[k].l;t[k].l=t[p].r;t[p].r=k;k=p;}<br>    void ins(int &amp;k,int x){<br>        if(!k)t[k=++sz].w=x,t[k].rnd=rand();<br>        else if(t[k].w&gt;x){<br>            ins(t[k].l,x);<br>            if(t[k].rnd<t[t[k].l].rnd)rturn(k); }else="" if(t[k].w<x){="" ins(t[k].r,x);="" if(t[k].rnd<t[t[k].r].rnd)lturn(k);="" };="" }="" int="" _max(int="" &k)="" {if(!t[k].r)return="" t[k].w;return="" _max(t[k].r);}="" _min(int="" {if(!t[k].l)return="" _min(t[k].l);}="" succ(int="" &k,int="" x){="" if(!k)return="" inf;="" if(t[k].w<x)return="" succ(t[k].r,x);="" if((!t[k].l)||_max(t[k].l)<x)return="" t[k].w;="" return="" succ(t[k].l,x);="" prev(int="" -inf;="" if(t[k].w="">x)return prev(t[k].l,x);<br>        if((!t[k].r)||_min(t[k].r)&gt;x)return t[k].w;<br>        return prev(t[k].r,x);<br>    }<br>    void print(int &amp;k,int dep){<br>        if(!k)return;<br>        print(t[k].l,dep+1);<br>        for(int i=0;i&lt;dep;i++)printf(“    “);<br>        printf(“[%d]=%d(%d/%d)%d\n”,k,t[k].w,t[k].cnt,t[k].s,<br>            (int)t[k].rnd/1000000);<br>        print(t[k].r,dep+1);<br>    }<br>}dat;<br>int main(){<br>    freopen(“in”,”r”,stdin);<br>    int n,x,ans,rt=0;<br>    scanf(“%d\n%d\n”,&amp;n,&amp;ans);<br>    dat.ins(rt,ans);<br>    for(int i=1;i&lt;n;i++){<br>        scanf(“%d\n”,&amp;x);<br>        ans+=min(dat.succ(rt,x)-x,x-dat.prev(rt,x));<br>        dat.ins(rt,x);<br>    }<br>    printf(“%d”,ans);<br>    return 0;<br>}</t[t[k].l].rnd)rturn(k);></cstdlib></p>
<pre><code>
## 离线-链表
### 题解
类似某年noip的开车旅行那题的预处理
升序sort，链表链起来
逆着原始的顺序逐个处理，用左右指针得到该点的答案，然后把这个点从链表中删掉

### 代码
```c++ 1588_lnk.cpp
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
#define P pair&lt;int,int&gt;
#define mkp(x,y) make_pair(x,y)
#define fir first
#define sec second
using namespace std;
const int N=50010,INF=1E8;
int main(){
    //freopen(&quot;in&quot;,&quot;r&quot;,stdin);
    int n,x,ans;P a[N];
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=0;i&lt;n;i++)scanf(&quot;%d&quot;,&amp;x),a[i]=mkp(x,i);
    ans=a[0].fir;sort(a,a+n);
    int l[N],r[N],loc[N];
    for(int i=0;i&lt;n;i++)loc[a[i].sec]=i;
    for(int i=0;i&lt;n;i++)l[i]=i-1,r[i]=i+1;
    l[0]=n+1;a[n].fir=INF;a[n+1].fir=-INF;
    for(int i=n-1;i&gt;0;i--){
        int j=loc[i];
        ans+=min(a[j].fir-a[l[j]].fir,a[r[j]].fir-a[j].fir);
        r[l[j]]=r[j];l[r[j]]=l[j];
    }
    printf(&quot;%d&quot;,ans);
    return 0;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tiger最近被公司升任为营业部经理，他上任后接受公司交给的第一项任务便是统计并分析公司成立以来的营业情况。&lt;br&gt;Tiger拿出了公司的账本，账本上记录了公司成立以来每天的营业额。分析营业情况是一项相当复杂的工作。由于节假日，大减价或者是其他情况的时候，营业额会出现一定的波动，当然一定的波动是能够接受的，但是在某些时候营业额突变得很高或是很低，这就证明公司此时的经营状况出现了问题。经济管理学上定义了一种最小波动值来衡量这种情况： 该天的最小波动值 当最小波动值越大时，就说明营业情况越不稳定。&lt;br&gt;而分析整个公司的从成立到现在营业情况是否稳定，只需要把每一天的最小波动值加起来就可以了。你的任务就是编写一个程序帮助Tiger来计算这一个值。 第一天的最小波动值为第一天的营业额。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://cothrax.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="离线" scheme="https://cothrax.github.io/tags/%E7%A6%BB%E7%BA%BF/"/>
    
      <category term="链表" scheme="https://cothrax.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="平衡树" scheme="https://cothrax.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="Treap" scheme="https://cothrax.github.io/tags/Treap/"/>
    
      <category term="HNOI" scheme="https://cothrax.github.io/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1026 [SCOI2009]windy数</title>
    <link href="https://cothrax.github.io/2016/12/10/bzoj-1026/"/>
    <id>https://cothrax.github.io/2016/12/10/bzoj-1026/</id>
    <published>2016-12-10T12:20:17.000Z</published>
    <updated>2016-12-18T05:21:59.720Z</updated>
    
    <content type="html"><![CDATA[<p>windy定义了一种windy数。不含前导零且相邻两个数字之差至少为2的正整数被称为windy数。 windy想知道，<br>在A和B之间，包括A和B，总共有多少个windy数？<br>100%的数据，满足 1 &lt;= A &lt;= B &lt;= 2000000000 。<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1026" target="_blank" rel="external">bzoj-1026</a><br><a href="/2016/12/10/bzoj-1026/1026.cpp" title="1026.cpp">1026.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>数位DP入门题<br>推荐<a href="http://wenku.baidu.com/link?url=swqfY1eyFBIywbtd6_WrQnBpIKFVzHysq4KHbC99UfWCvzPJH5k15tj2bVUEqIAWSqmomKYOWemQztBbRl2uEogZd4mO6g7yxL6D2XCgXUq" target="_blank" rel="external">初探数位dp</a>和刘聪的论文《浅谈数位统计类问题》<br>关于本题：<br>记f[i][j]为有i位、最高位为j的所有数中的windy数个数<br>$f[i][j]+=f[i-1][k],|j-k|\geq 2$</p>
<p>关于前导0，由于形如01…这类数是不包含在内的f[i][0]，因为1-0&lt;2的<br>因此可以先统计不含前导0的情况，即最高位k不统计f[k][0]<br>然后考虑含前导0的数，枚举$x&lt;k$，即有k-x位前导0，则将$\sum_{i=1}^{9}f[x][i]$加入答案<br>这个还可以用前缀和优化一下</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 1026.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<string.h></string.h></p>
<p>#include<cmath></cmath></p>
<p>#define ll long long<br>using namespace std;<br>const int N=12;<br>ll f[N][N],sum[N];<br>void dp(int n){<br>    fill(f[0],f[0]+N,(ll)1);<br>    for(int i=1;i<n;i++) for(int="" j="0;j<10;j++)" k="0;k<10;k++)" if(abs(k-j)="">=2)f[i][j]+=f[i-1][k];<br>    for(int i=0;i<n;i++) for(int="" j="1;j<10;j++)sum[i]+=f[i][j];" i="1;i<n;i++)sum[i]+=sum[i-1];" }="" ll="" calc(ll="" n){="" ret="0;int" a[n],k="0;" while(n)a[k++]="n%10,n/=10;a[k]=20;">=0;i–){<br>        for(int j=0;j<a[i];j++) if(abs(a[i+1]-j)="">=2)ret+=f[i][j];<br>        if(abs(a[i+1]-a[i])&lt;2)break;<br>    }<br>    return ret-f[k-1][0]+sum[k-2];<br>}<br>int main(){<br>    //freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    ll a,b;<br>    scanf(“%lld %lld”,&amp;a,&amp;b);<br>    dp((int)log10(b)+2);<br>    printf(“%lld”,calc(b+1)-calc(a));<br>    return 0;<br>}<br>```</a[i];j++)></n;i++)></n;i++)></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windy定义了一种windy数。不含前导零且相邻两个数字之差至少为2的正整数被称为windy数。 windy想知道，&lt;br&gt;在A和B之间，包括A和B，总共有多少个windy数？&lt;br&gt;100%的数据，满足 1 &amp;lt;= A &amp;lt;= B &amp;lt;= 2000000000 。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="数位DP" scheme="https://cothrax.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
      <category term="SCOI" scheme="https://cothrax.github.io/tags/SCOI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1833 [ZJOI2010]数字计数</title>
    <link href="https://cothrax.github.io/2016/12/10/bzoj-1833/"/>
    <id>https://cothrax.github.io/2016/12/10/bzoj-1833/</id>
    <published>2016-12-10T12:12:39.000Z</published>
    <updated>2016-12-10T12:20:55.641Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个正整数a和b，求在[a,b]中的所有整数中，每个数码(digit)各出现了多少次。<br>100%的数据中，a&lt;=b&lt;=10^12。<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1833" target="_blank" rel="external">bzoj-1833</a><br><a href="/2016/12/10/bzoj-1833/1833.cpp" title="1833.cpp">1833.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很像pj的某题<br>数位dp<br>记f[i][j][k]为有i位、最高位为j的数中k出现的次数<br>sum[i][k]为i位数中k出现的次数<br>$f[i][j][k]+=sum[i-1][k]+[j=k]*10^{i-1}$<br>然后处理一下前导0，类似<a href="/2016/12/10/bzoj-1026/" title="bzoj-1026 [SCOI2009]windy数">bzoj-1026 [SCOI2009]windy数</a><br>然后就是套路的从高到低枚举数位统计即可<br>bug:</p>
<ol>
<li>log10写成log2（。。。）</li>
<li>没有注意$10^i$</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 1833.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<cmath></cmath></p>
<p>#define ll long long<br>using namespace std;<br>const int N=16;<br>ll f[N][N][N],sum[N][N],amt[N][N],b[N]={1};<br>void dp(int n){<br>    for(int i=1;i<n;i++)b[i]=b[i-1]*10; for(int="" i="0;i<10;i++)f[0][i][i]=1,sum[0][i]=1;" j="0;j<10;j++)" k="0;k<10;k++)" f[i][j][k]="sum[i-1][k]+(j==k?1:0)*b[i]," sum[i][k]+="f[i][j][k];" amt[i][k]+="f[i][j][k];" amt[i][j]+="amt[i-1][j];" }="" ll="" calc(ll="" n,int="" x){="" tmp="n;" int="" a[n],k="0,cnt=0;ll" ret="0;" while(n)a[k++]="n%10,n/=10;">=0;i–){<br>        for(int j=(i==k-1?1:0);j&lt;a[i];j++)<br>            ret+=f[i][j][x]+cnt*b[i];<br>        cnt+=(a[i]==x)?1:0;<br>    }<br>    return ret+amt[k-2][x];<br>}<br>int main(){<br>    //freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    ll a,b;scanf(“%lld %lld”,&amp;a,&amp;b);<br>    dp((int)log10(b)+2);<br>    for(int i=0;i&lt;10;i++){<br>        printf(“%lld”,calc(b+1,i)-calc(a,i));<br>        if(i&lt;9)printf(“ “);<br>    }<br>    //fclose(stdin);fclose(stdout);<br>    return 0;<br>}<br>```</n;i++)b[i]=b[i-1]*10;></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定两个正整数a和b，求在[a,b]中的所有整数中，每个数码(digit)各出现了多少次。&lt;br&gt;100%的数据中，a&amp;lt;=b&amp;lt;=10^12。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="数位DP" scheme="https://cothrax.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
      <category term="ZJOI" scheme="https://cothrax.github.io/tags/ZJOI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-2595 [WC2008] 游览计划</title>
    <link href="https://cothrax.github.io/2016/12/09/bzoj-2595/"/>
    <id>https://cothrax.github.io/2016/12/09/bzoj-2595/</id>
    <published>2016-12-09T14:25:55.000Z</published>
    <updated>2016-12-09T12:08:32.749Z</updated>
    
    <content type="html"><![CDATA[<p>从未来过绍兴的小 D 有幸参加了 Winter Camp 2008,他被这座历史名城的秀丽风景所吸引,强烈要求游览绍兴及其周边的所有景点。<br>主办者将绍兴划分为 N 行 M 列(N×M)个方块,如下图(8×8):</p>
<table>
<thead>
<tr>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
<th style="text-align:center">.</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">沈园</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">八字桥</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">周恩来故居</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">东湖</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">大禹陵</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">兰亭</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
<tr>
<td style="text-align:center">鉴湖</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
<td style="text-align:center">.</td>
</tr>
</tbody>
</table>
<p>景点含于方块内,且一个方块至多有一个景点。无景点的方块视为路。<br>为了保证安全与便利,主办方依据路况和治安状况,在非景点的一些方块内安排不同数量的志愿者;在景点内聘请导游(导游不是志愿者)。<br>在选择旅游方案时,保证任意两个景点之间,存在一条路径,在这条路径所经过的每一个方块都有志愿者或者该方块为景点。既能满足选手们游览的需要,又能够让志愿者的总数最少。<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:center">1</th>
<th style="text-align:center">4</th>
<th style="text-align:center">1</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">2</th>
<th style="text-align:center">4</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">沈园</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">八字桥</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">6</td>
<td style="text-align:center">5</td>
<td style="text-align:center">周恩来故居</td>
<td style="text-align:center"><font color="red">2</font></td>
<td style="text-align:center">4</td>
<td style="text-align:center"><font color="red">1</font></td>
<td style="text-align:center">东湖</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center"><font color="red">1</font></td>
<td style="text-align:center"><font color="red">3</font></td>
<td style="text-align:center"><font color="red">4</font></td>
<td style="text-align:center"><font color="red">2</font></td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><font color="red">1</font></td>
<td style="text-align:center"><font color="red">3</font></td>
<td style="text-align:center"><font color="red">1</font></td>
<td style="text-align:center">5</td>
<td style="text-align:center">大禹陵</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">兰亭</td>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">鉴湖</td>
<td style="text-align:center"><font color="red">2</font></td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>例如,在上面的例子中,在每个没有景点的方块中填入一个数字,表示控制该方块最少需要的志愿者数目:</p>
<p>图中用深色标出的方块区域就是一种可行的志愿者安排方案,一共需要 20名志愿者。由图可见,两个相邻的景点是直接(有景点内的路)连通的(如沈园和八字桥)。<br>现在,希望你能够帮助主办方找到一种最好的安排方案。</p>
<p>$n,m,k\leq 10$</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2595" target="_blank" rel="external">bzoj-2595</a><br><a href="/2016/12/09/bzoj-2595/2595.cpp" title="2595.cpp">2595.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>斯坦纳树，即经过定点的最小生成树，换句话说，就是在生成树的过程中允许新增一些点来最小化代价<br>首先可以给格子(x,y)编号x*m+y<br>景点数≤10，可以状压dp解决<br>记f[i][s] 为生成树根为i，连通状态至少为s的最小代价，其中s(x)表示i是否与第x个景点连通<br>初始状态：记sp[i]为第i个景点，则$f[sp[i]][2^i]=0$<br>然后转移：<br>$f[i][s]=min(f[i][s]+f[i][s-t]-a[i]),t\in s$<br>$f[i][s]=min(f[j][s]+a[i]),\exists e(j\to i)$</p>
<p>前一个直接枚举子集（手贱把枚举子集码成了枚举lowbit,wa一次）<br>至于后一个，由于这个方程的转移中有环，但最优解的转移一定是拓扑的，所以用多源点的spfa解决<br>dp之后任意$f[sp[i]][2^k-1]$都是最优答案<br>至于输出方案，用pre[i][s]记录f[i][s]是由哪个状态转移过来的，dfs一下即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 2595.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#define P pair<int,int></int,int></p>
<p>#define mkp(x,y) make_pair(x,y)</p>
<p>#define ll long long<br>using namespace std;<br>const int N=11,Z=N<em>N</em>2;const ll INF=10E16;<br>int n,m,nm,l;ll a[N<em>N];<br>inline int p(int x,int y){return x</em>m+y;}</p>
<p>P pre[N<em>N][1&lt;&lt;N];ll f[N</em>N][1&lt;<n]; const="" int="" x[4]="{0,1,0,-1},Y[4]={1,0,-1,0};" q[z],h,t;bool="" inq[z];="" void="" spfa(int="" i){="" for(;h!="t;inq[q[h]]=0,h=(h+1)%Z)" for(int="" j="0;j<4;j++){" u="q[h],x=u/m+X[j],y=u%m+Y[j],v=p(x,y);" if(x<0||y<0||x="">=n||y&gt;=m)continue;<br>            if(f[v][i]&gt;f[u][i]+a[v]){<br>                f[v][i]=f[u][i]+a[v];pre[v][i]=mkp(u,i);<br>                if(!inq[v])q[t++]=v,inq[v]=1,t%=Z;<br>            }<br>        }<br>}</n];></p>
<p>bool flg[Z];<br>void dfs(int i,int j){<br>    if(f[i][j]==INF||i==-1||j==0)return;<br>    flg[i]=1;int x,y;<br>    dfs(x=pre[i][j].first,y=pre[i][j].second);<br>    if(x==i)dfs(x,y^j);<br>}</p>
<p>int main(){<br>    //freopen(“in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    scanf(“%d %d”,&amp;n,&amp;m);nm=n*m;<br>    int sp[N],k=0;bool mk[Z];<br>    fill(mk,mk+Z,0);<br>    for(int i=0;i<n;i++) for(int="" j="0;j<m;j++){" scanf("%lld",&a[p(i,j)]);="" if(!a[p(i,j)])sp[k++]="p(i,j),mk[p(i,j)]=1;" }="" l="1<<k;" i="0;i<nm;i++){" fill(f[i],f[i]+l+1,inf);="" fill(pre[i],pre[i]+l+1,mkp(-1,0));="" fill(inq,inq+z,0);="" ll="" tmp;h="t=0;" s="i;s;s=i&(s-1))" if(f[j][i]="">(tmp=f[j][s]+f[j][i^s]-a[j]))<br>                    f[j][i]=tmp,pre[j][i]=mkp(j,s);<br>            if(f[j][i]!=INF)q[t++]=j,inq[j]=1,t%=Z;<br>        }spfa(i);<br>    }<br>    printf(“%lld\n”,f[sp[0]][l-1]);dfs(sp[0],l-1);<br>    for(int i=0;i&lt;n;i++){<br>        for(int j=0;j&lt;m;j++)<br>            if(mk[p(i,j)])printf(“x”);<br>            else if(flg[p(i,j)])printf(“o”);<br>            else printf(“_”);<br>        printf(“\n”);<br>    }<br>    return 0;<br>}<br>```</n;i++)></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从未来过绍兴的小 D 有幸参加了 Winter Camp 2008,他被这座历史名城的秀丽风景所吸引,强烈要求游览绍兴及其周边的所有景点。&lt;br&gt;主办者将绍兴划分为 N 行 M 列(N×M)个方块,如下图(8×8):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;沈园&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;八字桥&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;周恩来故居&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;东湖&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;大禹陵&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;兰亭&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;鉴湖&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;景点含于方块内,且一个方块至多有一个景点。无景点的方块视为路。&lt;br&gt;为了保证安全与便利,主办方依据路况和治安状况,在非景点的一些方块内安排不同数量的志愿者;在景点内聘请导游(导游不是志愿者)。&lt;br&gt;在选择旅游方案时,保证任意两个景点之间,存在一条路径,在这条路径所经过的每一个方块都有志愿者或者该方块为景点。既能满足选手们游览的需要,又能够让志愿者的总数最少。&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="斯坦纳树" scheme="https://cothrax.github.io/tags/%E6%96%AF%E5%9D%A6%E7%BA%B3%E6%A0%91/"/>
    
      <category term="WC" scheme="https://cothrax.github.io/tags/WC/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-2004 [HNOI2010]Bus 公交线路</title>
    <link href="https://cothrax.github.io/2016/12/09/bzoj-2004/"/>
    <id>https://cothrax.github.io/2016/12/09/bzoj-2004/</id>
    <published>2016-12-09T11:21:31.000Z</published>
    <updated>2016-12-09T11:39:02.123Z</updated>
    
    <content type="html"><![CDATA[<p>小Z所在的城市有N个公交车站，排列在一条长(N-1)km的直线上，从左到右依次编号为1到N，相邻公交车站间的距<br>离均为1km。 作为公交车线路的规划者，小Z调查了市民的需求，决定按下述规则设计线路：</p>
<ol>
<li>设共K辆公交车，则1到K号站作为始发站，N-K+1到N号台作为终点站。</li>
<li>每个车站必须被一辆且仅一辆公交车经过（始发站和<br>终点站也算被经过）。 </li>
<li>公交车只能从编号较小的站台驶往编号较大的站台。 </li>
<li>一辆公交车经过的相邻两个站台间距离不得超过Pkm</li>
</ol>
<p>在最终设计线路之前，小Z想知道有多少种满足要求的方案。由于答案可能很大，你只<br>需求出答案对30031取模的结果。</p>
<span>$N\leq 10^9,1&lt;P\leq 10,K&lt;N,2&lt;K\leq P$</span><!-- Has MathJax -->
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2004" target="_blank" rel="external">bzoj-2004</a><br><a href="/2016/12/09/bzoj-2004/2004.cpp" title="2004.cpp">2004.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>状压dp+矩阵快速幂<br>直接状压+矩乘$O(2^{3P}logN)$是会T的<br>实际上最低位不是1、1的个数!=k的状态都是无效的<br>预处理有效状态，再构造矩阵就好</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 2004.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<string.h><br>using namespace std;<br>const int N=200,M=2050,Z=30031;<br>int n,k,p,m,t=0,cnt[M],a[M],loc[M];<br>struct mat{<br>    int v[N][N];<br>    mat(){memset(v,0,sizeof(v));}<br>    friend mat operator<em>(mat a,mat b){<br>        mat ret;<br>        for(int i=0;i&lt;t;i++)<br>            for(int j=0;j&lt;t;j++)<br>                for(int k=0;k&lt;t;k++)<br>                    ret.v[i][j]+=a.v[i][k]</em>b.v[k][j],<br>                    ret.v[i][j]%=Z;<br>        return ret;<br>    }<br>    friend mat operator^(mat a,int n){<br>        mat ret;<br>        for(int i=0;i<t;i++)ret.v[i][i]=1; for(;n;n="">&gt;=1,a=a<em>a)if(n&amp;1)ret=ret</em>a;<br>        return ret;<br>    }<br>}f;<br>int main(){<br>    //freopen(“in”,”r”,stdin);<br>    scanf(“%d %d %d”,&amp;n,&amp;k,&amp;p);m=1&lt;<p; for(int="" i="1;i<m;i++)cnt[i]=cnt[i&(i-1)]+1;" if(cnt[i]="=k&&(i&1))loc[i]=t,a[t++]=i;" else="" loc[i]="N-1;" printf("%d\n",t);="" int="" x="a[i];" f.v[loc[(x<<1)&(m-1)|1]][i]="1;" if(x="">&gt;(p-1))continue;<br>        for(int j=1;j&lt;m;j&lt;&lt;=1)f.v[loc[(x&lt;&lt;1)^j|1]][i]=1;<br>    }<br>    int st=loc[(1&lt;&lt;k)-1];<br>    printf(“%d”,(f^(n-k)).v[st][st]);<br>    return 0;<br>}<br>```</p;></t;i++)ret.v[i][i]=1;></string.h></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小Z所在的城市有N个公交车站，排列在一条长(N-1)km的直线上，从左到右依次编号为1到N，相邻公交车站间的距&lt;br&gt;离均为1km。 作为公交车线路的规划者，小Z调查了市民的需求，决定按下述规则设计线路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设共K辆公交车，则1到K号站作为始发站，N-K+1到N号台作为终点站。&lt;/li&gt;
&lt;li&gt;每个车站必须被一辆且仅一辆公交车经过（始发站和&lt;br&gt;终点站也算被经过）。 &lt;/li&gt;
&lt;li&gt;公交车只能从编号较小的站台驶往编号较大的站台。 &lt;/li&gt;
&lt;li&gt;一辆公交车经过的相邻两个站台间距离不得超过Pkm&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在最终设计线路之前，小Z想知道有多少种满足要求的方案。由于答案可能很大，你只&lt;br&gt;需求出答案对30031取模的结果。&lt;/p&gt;
&lt;span&gt;$N\leq 10^9,1&amp;lt;P\leq 10,K&amp;lt;N,2&amp;lt;K\leq P$&lt;/span&gt;&lt;!-- Has MathJax --&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="矩阵" scheme="https://cothrax.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-1097 [POI2007]旅游景点atr</title>
    <link href="https://cothrax.github.io/2016/12/09/bzoj-1097/"/>
    <id>https://cothrax.github.io/2016/12/09/bzoj-1097/</id>
    <published>2016-12-09T11:11:26.000Z</published>
    <updated>2016-12-09T11:33:30.941Z</updated>
    
    <content type="html"><![CDATA[<p>大意：给定n个节点，m条边的带权无向图，要最小化这样一条路径的代价：</p>
<ol>
<li>从点1出发</li>
<li>经过点2..k+1，顺序有一定的要求</li>
<li>终点为n</li>
</ol>
<p>$n\leq 20000,m\leq 200000,k\leq 20$</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://hzwer.com/4742.html" target="_blank" rel="external">hzwer</a><br><a href="/2016/12/09/bzoj-1097/atr.cpp" title="atr.cpp">atr.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先处理1..k+1及n之间的最短路<br>然后状压dp，记f[s][i]为状态为s，s(x)表示第x个点是否已经经过，i为这条路径终点<br>转移直接枚举补集中的点即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ atr.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio></cstdio></p>
<p>#include<queue></queue></p>
<p>#include<string.h></string.h></p>
<p>#define P pair<int,int></int,int></p>
<p>#define mkp(x,y) make_pair(x,y)<br>using namespace std;<br>const int N=20010,M=400010,K=25,L=1&lt;<21,inf=10e8; struct="" edge{int="" v,w,nxt;}="" g[m];="" int="" head[n],d[n],a[k][k],f[l][k],bf[k],af[k],b[k];="" n,m,k,t,l,sz="0;" bool="" flg[n];="" void="" _add(int="" u,int="" v,int="" w)="" {g[++sz]="{v,w,head[u]};head[u]=sz;};" add(int="" {_add(u,v,w);_add(v,u,w);}="" dij(int="" s){="" priority_queue<p,vector<p="">,greater<p> &gt;q;<br>    fill(d,d+n+1,INF);fill(flg,flg+n+1,false);<br>    d[s]=0;q.push(mkp(0,s));<br>    while(!q.empty()){<br>        int u=q.top().second,v;q.pop();<br>        if(flg[u])continue;flg[u]=true;<br>        for(int i=head[u];i;i=g[i].nxt)<br>            if(d[u]+g[i].w&lt;d[v=g[i].v])<br>                d[v]=d[u]+g[i].w,q.push(mkp(d[v],v));<br>    }<br>    for(int i=1;i&lt;=k+1;i++)a[s][i]=d[i];<br>    a[s][0]=d[n];<br>}<br>inline bool jud(int x,int i)<br>{return (x&amp;bf[i])==bf[i]&amp;&amp;(x&amp;af[i])==0;}</p>
<p>int main(){<br>    //freopen(“atr9b.in”,”r”,stdin);freopen(“out”,”w”,stdout);<br>    scanf(“%d %d %d\n”,&amp;n,&amp;m,&amp;k);<br>    int u,v,w;l=1&lt;&lt;k;b[2]=1;<br>    for(int i=3;i&lt;=k+1;i++)b[i]=b[i-1]&lt;&lt;1;<br>    for(int i=0;i&lt;m;i++)<br>        scanf(“%d %d %d\n”,&amp;u,&amp;v,&amp;w),add(u,v,w);<br>    for(int i=2;i&lt;=k+1;i++)dij(i);<br>    scanf(“%d\n”,&amp;t);<br>    for(int i=0;i&lt;t;i++){<br>        scanf(“%d %d\n”,&amp;u,&amp;v);<br>        bf[v]|=b[u];af[u]|=b[v];<br>    }<br>    for(int i=0;i&lt;l;i++)<br>        for(int j=2;j&lt;=k+1;j++)f[i][j]=INF;<br>    for(int i=2;i&lt;=k+1;i++)<br>        if(!bf[i])f[b[i]][i]=a[i][1]/<em>,printf(“%d, “,i)</em>/;<br>    for(int i=0;i&lt;l;i++)<br>        for(int j=2;j&lt;=k+1;j++)if(f[i][j]!=INF)<br>            for(int p=2;p&lt;=k+1;p++)if(!(i&amp;b[p])&amp;&amp;jud(i,p))<br>                f[i|b[p]][p]=min(f[i|b[p]][p],f[i][j]+a[j][p]);<br>    int ans=INF;<br>    for(int i=2;i&lt;=k+1;i++)ans=min(ans,f[l-1][i]+a[i][0]);<br>    printf(“%d”,ans);<br>    //fclose(stdin);fclose(stdout);<br>    return 0;<br>}<br>```</p>
</21,inf=10e8;></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大意：给定n个节点，m条边的带权无向图，要最小化这样一条路径的代价：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从点1出发&lt;/li&gt;
&lt;li&gt;经过点2..k+1，顺序有一定的要求&lt;/li&gt;
&lt;li&gt;终点为n&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$n\leq 20000,m\leq 200000,k\leq 20$&lt;/p&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="图论" scheme="https://cothrax.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://cothrax.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="POI" scheme="https://cothrax.github.io/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-2734 [HNOI2012]集合选数</title>
    <link href="https://cothrax.github.io/2016/12/09/bzoj-2734/"/>
    <id>https://cothrax.github.io/2016/12/09/bzoj-2734/</id>
    <published>2016-12-09T11:06:32.000Z</published>
    <updated>2016-12-09T11:33:21.854Z</updated>
    
    <content type="html"><![CDATA[<p>约束条件：若x在集合s中，则2x和3x不能在该集合中。<br>对于任意一个正整数 n≤100000，如何求出{1, 2,…, n} 的满足上述约束条件的子集的个数（只需输出对 1,000,000,001 取模的结果）。<br>n≤20</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1013" target="_blank" rel="external">bzoj-2734</a><br><a href="/2016/12/09/bzoj-2734/2734.cpp" title="2734.cpp">2734.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>基于状压dp的想法题<br>详见：<a href="http://hzwer.com/5149.html" target="_blank" rel="external">hzwer</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 2734.cpp</p>
<p>#include<cstdio></cstdio></p>
<p>#include<algorithm></algorithm></p>
<p>#include<string.h></string.h></p>
<p>#define ll long long<br>using namespace std;<br>const int N=100050,K=20,Z=1E9+1;<br>int n,m=0,b[K]={1},h[1&lt;&lt;K],f[K][1&lt;&lt;K];<br>bool flg[N];<br>int calc(int x){<br>    int cnt=0,a[K];memset(a,0,sizeof(a));<br>    for(int i=x;i&lt;=n;i<em>=2,cnt++)<br>        for(int j=i;j&lt;=n;j</em>=3)<br>            a[cnt+1]++,flg[j]=true;<br>    for(int i=1;i&lt;=cnt;i++)fill(f[i],f[i]+b[a[i]],0);<br>    f[0][0]=1;<br>    for(int i=0;i&lt;=cnt;i++)<br>        for(int j=0;h[j]&lt;b[a[i]]&amp;&amp;j&lt;m;j++)if(f[i][j])<br>            for(int k=0;h[k]&lt;b[a[i+1]]&amp;&amp;k&lt;m;k++)<br>                if(!(h[k]&amp;(h[k]&lt;&lt;1))&amp;&amp;!(h[k]&amp;h[j]))<br>                    f[i+1][k]=((ll)f[i+1][k]+(ll)f[i][j])%Z;<br>    int ret=0;<br>    for(int i=0;h[i]&lt;b[a[cnt]]&amp;&amp;i&lt;m;i++)<br>        ret=((ll)ret+(ll)f[cnt][i])%Z;<br>    return ret;<br>}<br>int main(){<br>    //freopen(“in”,”r”,stdin);<br>    scanf(“%d”,&amp;n);int ans=1;<br>    for(int i=1;i&lt;K;i++)b[i]=b[i-1]&lt;&lt;1;<br>    for(int i=0;i&lt;1&lt;&lt;K;i++)if(!(i&amp;(i&lt;&lt;1)))h[m++]=i;<br>    for(int i=1;i&lt;=n;i++)if(!flg[i])ans=((ll)ans*(ll)calc(i))%Z;<br>    printf(“%d”,ans);<br>    return 0;<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;约束条件：若x在集合s中，则2x和3x不能在该集合中。&lt;br&gt;对于任意一个正整数 n≤100000，如何求出{1, 2,…, n} 的满足上述约束条件的子集的个数（只需输出对 1,000,000,001 取模的结果）。&lt;br&gt;n≤20&lt;/p&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="HNOI" scheme="https://cothrax.github.io/tags/HNOI/"/>
    
      <category term="想法题" scheme="https://cothrax.github.io/tags/%E6%83%B3%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>bzoj-2964 分裂</title>
    <link href="https://cothrax.github.io/2016/12/09/bzoj-2064/"/>
    <id>https://cothrax.github.io/2016/12/09/bzoj-2064/</id>
    <published>2016-12-09T10:59:59.000Z</published>
    <updated>2016-12-09T11:49:44.866Z</updated>
    
    <content type="html"><![CDATA[<p> 中国历史上上分分和和次数非常多。。通读中国历史的WJMZBMR表示毫无压力。 同时经常搞OI的他把这个变成了一个数学模型。 假设中国的国土总和是不变的。 每个国家都可以用他的国土面积代替， 又两种可能，一种是两个国家合并为1个，那么新国家的面积为两者之和。 一种是一个国家分裂为2个，那么2个新国家的面积之和为原国家的面积。 WJMZBMR现在知道了很遥远的过去中国的状态，又知道了中国现在的状态，想知道至少要几次操作（分裂和合并各算一次操作），能让中国从当时状态到达现在的状态。<br>$n1,n2\leq 10$<br><a id="more"></a></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://hzwer.com/2001.html" target="_blank" rel="external">hzwer</a><br><a href="/2016/12/09/bzoj-2064/2064.cpp" title="2064.cpp">2064.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>基于状压dp的想法题<br>见：<a href="http://www.cnblogs.com/xkui/p/4540093.html" target="_blank" rel="external">神犇的blog</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ 2064.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio><br>using namespace std;<br>const int N=25,M=1&lt;&lt;21;<br>int n=0,m,a[N],b[N]={1},s[M],f[M];<br>int main(){<br>    scanf(“%d”,&amp;n);<br>    for(int i=0;i&lt;n;i++)scanf(“%d”,&amp;a[i]);<br>    int x;scanf(“%d”,&amp;x);n+=x;m=1&lt;&lt;n;<br>    for(int i=n-x;i&lt;n;i++)scanf(“%d”,&amp;a[i]),a[i]<em>=-1;<br>    for(int i=1;i&lt;n;i++)b[i]=b[i-1]&lt;&lt;1;<br>    for(int i=0;i&lt;n;i++)s[b[i]]=a[i];<br>    for(int i=0;i&lt;m;i++)s[i]=s[i&amp;(i-1)]+s[i&amp;(-i)];<br>    for(int i=1;i&lt;m;i++){<br>        for(int j=0;j&lt;n;j++)if(i&amp;b[j])<br>            f[i]=max(f[i^b[j]],f[i]);<br>        if(!s[i])f[i]++;<br>    }<br>    printf(“%d”,n-2</em>f[m-1]);<br>    return 0;<br>}<br>```</cstdio></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 中国历史上上分分和和次数非常多。。通读中国历史的WJMZBMR表示毫无压力。 同时经常搞OI的他把这个变成了一个数学模型。 假设中国的国土总和是不变的。 每个国家都可以用他的国土面积代替， 又两种可能，一种是两个国家合并为1个，那么新国家的面积为两者之和。 一种是一个国家分裂为2个，那么2个新国家的面积之和为原国家的面积。 WJMZBMR现在知道了很遥远的过去中国的状态，又知道了中国现在的状态，想知道至少要几次操作（分裂和合并各算一次操作），能让中国从当时状态到达现在的状态。&lt;br&gt;$n1,n2\leq 10$&lt;br&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="想法题" scheme="https://cothrax.github.io/tags/%E6%83%B3%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>begin-1501 [Usaco2006]玉米田</title>
    <link href="https://cothrax.github.io/2016/12/09/begin-1501/"/>
    <id>https://cothrax.github.io/2016/12/09/begin-1501/</id>
    <published>2016-12-09T10:29:20.000Z</published>
    <updated>2016-12-09T11:33:05.606Z</updated>
    
    <content type="html"><![CDATA[<p>农民 John 购买了一处肥沃的矩形牧场，分成M*N(1 &lt;= M &lt;= 12; 1 &lt;= N &lt;= 12)个<br>格子。他想在那里的一些格子中种植美味的玉米。遗憾的是，有些格子区域的土地是贫瘠的，<br>不能耕种。<br>精明的 FJ 知道奶牛们进食时不喜欢和别的牛相邻，所以一旦在一个格子中种植玉米，那么<br>他就不会在相邻的格子中种植，即没有两个被选中的格子拥有公共边。他还没有最终确定哪些<br>格子要选择种植玉米。<br>作为一个思想开明的人，农民 John 希望考虑所有可行的选择格子种植方案。由于太开明，<br>他还考虑一个格子都不选择的种植方案！请帮助农民 John 确定种植方案总数。</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://begin.lydsy.com/JudgeOnline/problem.php?id=1501" target="_blank" rel="external">begin-1501</a><br><a href="/2016/12/09/begin-1501/b1501.cpp" title="b1501.cpp">b1501.cpp</a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>逐行状压，<a href="/2016/12/03/bzoj-1087/" title="king">king</a>那题的弱化版</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>```c++ b1501.cpp</p>
<p>#include<algorithm></algorithm></p>
<p>#include<cstdio><br>using namespace std;<br>const int N=13,M=1&lt;&lt;N,Z=100000000;<br>int n,m,l,a[N],f[N][M];<br>bool flg[M],mat[M][M];</cstdio></p>
<p>int main(){<br>    freopen(“in”,”r”,stdin);<br>    freopen(“out”,”w”,stdout);<br>    scanf(“%d %d\n”,&amp;n,&amp;m);l=1&lt;&lt;m;int x;<br>    for(int i=1;i&lt;=n;i++)<br>        for(int j=0;j&lt;m;j++)scanf(“%d”,&amp;x),a[i]|=((x^1)&lt;&lt;j);<br>    //for(int i=1;i&lt;=n;i++)printf(“%d:%d\n”,i,a[i]);<br>    for(int i=0;i&lt;l;i++)<br>        if(!(i&amp;(i&lt;&lt;1)))flg[i]=true;<br>    for(int i=0;i&lt;l;i++)<br>        for(int j=0;j&lt;l;j++)<br>            if(!(i&amp;j))mat[i][j]=true;<br>    for(int i=0;i&lt;l;i++)if(flg[i]&amp;&amp;!(i&amp;a[1]))f[1][i]=1;<br>    for(int i=1;i&lt;n;i++)<br>        for(int p=0;p&lt;l;p++)if(flg[p]&amp;&amp;!(p&amp;a[i])&amp;&amp;f[i][p])<br>            for(int q=0;q&lt;l;q++)if(flg[q]&amp;&amp;!(q&amp;a[i+1])&amp;&amp;mat[p][q])<br>                f[i+1][q]=(f[i][p]+f[i+1][q])%Z;<br>    int ans=0;<br>    for(int i=0;i&lt;l;i++)ans=(ans+f[n][i])%Z;<br>    printf(“%d”,ans);<br>    return 0;<br>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;农民 John 购买了一处肥沃的矩形牧场，分成M*N(1 &amp;lt;= M &amp;lt;= 12; 1 &amp;lt;= N &amp;lt;= 12)个&lt;br&gt;格子。他想在那里的一些格子中种植美味的玉米。遗憾的是，有些格子区域的土地是贫瘠的，&lt;br&gt;不能耕种。&lt;br&gt;精明的 FJ 知道奶牛们进食时不喜欢和别的牛相邻，所以一旦在一个格子中种植玉米，那么&lt;br&gt;他就不会在相邻的格子中种植，即没有两个被选中的格子拥有公共边。他还没有最终确定哪些&lt;br&gt;格子要选择种植玉米。&lt;br&gt;作为一个思想开明的人，农民 John 希望考虑所有可行的选择格子种植方案。由于太开明，&lt;br&gt;他还考虑一个格子都不选择的种植方案！请帮助农民 John 确定种植方案总数。&lt;/p&gt;
    
    </summary>
    
      <category term="Problem Set" scheme="https://cothrax.github.io/categories/Problem-Set/"/>
    
    
      <category term="OI" scheme="https://cothrax.github.io/tags/OI/"/>
    
      <category term="DP" scheme="https://cothrax.github.io/tags/DP/"/>
    
      <category term="状压DP" scheme="https://cothrax.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="USACO" scheme="https://cothrax.github.io/tags/USACO/"/>
    
  </entry>
  
</feed>
